{"meta":{"title":"学而知码，写而造轮","subtitle":null,"description":null,"author":"WXY","url":"http://wxy-cs.com"},"pages":[{"title":"weixin","date":"2016-10-03T10:45:17.000Z","updated":"2016-10-03T10:48:24.110Z","comments":true,"path":"weixin/index.html","permalink":"http://wxy-cs.com/weixin/index.html","excerpt":"","text":"请扫一扫，添加微信"},{"title":"About this web site","date":"2016-10-05T13:26:43.281Z","updated":"2016-10-05T13:26:43.277Z","comments":true,"path":"about/index.html","permalink":"http://wxy-cs.com/about/index.html","excerpt":"","text":"姓名: 王小猿 造不好轮子，撸不好代码的程序猿!"},{"title":"Categories","date":"2016-10-03T06:44:28.609Z","updated":"2016-09-19T14:18:54.000Z","comments":true,"path":"categories/index.html","permalink":"http://wxy-cs.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2016-10-03T06:44:28.609Z","updated":"2016-09-19T14:18:54.000Z","comments":true,"path":"tags/index.html","permalink":"http://wxy-cs.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Dijkstra(迪杰斯特拉)算法","slug":"Dijkstra-迪杰斯特拉-算法","date":"2016-10-10T07:31:18.000Z","updated":"2016-10-10T08:19:32.040Z","comments":true,"path":"2016/10/10/Dijkstra-迪杰斯特拉-算法/","link":"","permalink":"http://wxy-cs.com/2016/10/10/Dijkstra-迪杰斯特拉-算法/","excerpt":"","text":"迪杰斯特拉(Dijkstra)算法是典型最短路径算法，用于计算一个节点到其它节点的最短路径。 迪杰斯特拉(Dijkstra)算法以起点为中心层层向外扩展（广度优先搜索思想）,直到扩展到终点为止。 原理 首先，引进一个辅助向量D，它的每个分量D表示当前所找到的从始点v到每个终点vi的最短路径的长度。如D[3]=2表示从始点v到终点3的路径相对最小长度为2。这里强调相对就是说在算法过程中D的值是在不断逼近最终结果但在过程中不一定就等于最短路径长度。它的初始状态为：若从v到vi有弧，则D为弧上的权值；否则置D为∞。显然，长度为 D[j]=Min{D | vi∈V} 的路径就是从v出发的长度最短的一条最短路径。此路径为(v,vj)。 那么，下一条长度次短的最短路径是哪一条呢？假设该次短路径的终点是vk，则可想而知，这条路径或者是(v,vk)，或者是(v,vj,vk)。它的长度或者是从v到vk的弧上的权值，或者是D[j]和从vj到vk的弧上的权值之和。 一般情况下，假设S为已求得最短路径的终点的集合，则可证明：下一条最短路径（设其终点为X）或者是弧(v,x)，或者是中间只经过S中的顶点而最后到达顶点X的路径。因此，下一条长度次短的最短路径的长度必是D[j]=Min{D | vi∈V-S} 其中，D或者是弧(v,vi)上的权值，或者是Dk和弧(vk,vi)上的权值之和。 基本思想 通过Dijkstra计算图G中的最短路径时，需要指定起点s(即从顶点s开始计算)。 此外，引进两个集合S和U。S的作用是记录已求出最短路径的顶点(以及相应的最短路径长度)，而U则是记录还未求出最短路径的顶点(以及该顶点到起点s的距离)。 初始时，S中只有起点s；U中是除s之外的顶点，并且U中顶点的路径是”起点s到该顶点的路径”。然后，从U中找出路径最短的顶点，并将其加入到S中；接着，更新U中的顶点和顶点对应的路径。 然后，再从U中找出路径最短的顶点，并将其加入到S中；接着，更新U中的顶点和顶点对应的路径。 … 重复该操作，直到遍历完所有顶点。 图解 动态图解 注：以上图片均来自网络，如有侵权，24小时内删除！","categories":[{"name":"技术","slug":"技术","permalink":"http://wxy-cs.com/categories/技术/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://wxy-cs.com/tags/算法/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://wxy-cs.com/categories/技术/"}]},{"title":"sql server存储过程和触发器","slug":"sql-server","date":"2016-05-18T11:04:40.000Z","updated":"2016-10-03T11:20:42.223Z","comments":true,"path":"2016/05/18/sql-server/","link":"","permalink":"http://wxy-cs.com/2016/05/18/sql-server/","excerpt":"","text":"存储过程存储过程Procedure是一组为了完成特定功能的SQL语句集合，经编译后存储在数据库中，用户通过指定存储过程的名称并给出参数来执行。 1.系统存储过程","categories":[{"name":"技术","slug":"技术","permalink":"http://wxy-cs.com/categories/技术/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://wxy-cs.com/tags/数据库/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://wxy-cs.com/categories/技术/"}]},{"title":"对多值依赖的理解","slug":"maltivalued-dependence","date":"2016-05-18T10:59:31.000Z","updated":"2016-10-03T11:19:13.051Z","comments":true,"path":"2016/05/18/maltivalued-dependence/","link":"","permalink":"http://wxy-cs.com/2016/05/18/maltivalued-dependence/","excerpt":"","text":"在关系数据库设计中的函数依赖理论中有一个多值依赖，对多值依赖的理解现做如下整理： 搜寻资料发现对多值依赖的讲解无非都用了两个关系模式的例子： 1.Teching（物理，老师，资料） 2.Storehouse（仓库管理员，仓库号，库存产品号） 首先说到多值依赖就会想到函数依赖，函数依赖规定了某些元组不能出现在关系中。如果A-&gt;B成立，我们就不能有两个元组在A上的值相同而在B上的值不同。而多值依赖却可以不排除这些元组的存在，所以函数依赖有时候又叫相等产生的依赖，而多值依赖又叫元组产生的依赖。 多值依赖从名字上看的理解是多个值依赖于同一个值 定义设R（U）是属性集U上的一个关系模式，X，Y，Z是U的子集，并且Z=U-X-Z。关系模式R上X-&gt;-&gt;Y成立，当且仅当对R（U）中的任意一个关系r,给定一对（X，Z）值，有一组Y的值与之对应，这组值仅仅取决于X的值，而与Z的值无关。 看定义很模糊，来看一个例子（来自《数据库系统概念》): ID dept_name street city 22222 Physics North Rye 22222 Physics Main Manchester 12121 Finance Lake Horseneck 是一个大学的关系模型，ID为教师的ID，一个教师有多个地址 我们按照定义来看一下，一个ID值有多个（street,city）与之对应。将ID看成X，将（street，city）看成Y，将dept_name看成Z，Z=U-X-Y,而且给定一组（X,Z）的值（我们选（2222，physics））有一组Y值与之对应（（North,Rye）,(Main,Manchester)）,所以可以说 ID-&gt;-&gt;street city 现在我们再来看一下开头说的两个例子: 例l： 学校中某一门课程由多个教员讲授，他们使用相同的一套参考书。每个教员可以讲授多门课程，每种参考书可以供多门课程使用。我们可以用一个非规范化的关系来表示教员T,课程C和参考书B之间的关系： 课程C 教员T 参考书B-————————————物理 李勇 普通物理学 王 军 光学原理 物理习题集-————————————数学 李 勇 数学分析 张 平 微分方程 高等代数 该关系模式存在全码(C,T,B),因此该关系模式属于BCNF范式 我们再来用多值依赖的定义来看一下这个关系模式：对于一个（物理，光学原理）有一组T值{李勇，王军}与之对应，但这组值仅仅取决于（物理），也就是说对于另一（物理，普通物理学），它对应的这组值仍然是{李勇，王军}，所以{李勇，王军}其实就是Z，物理是X，（普通物理学，光学原理，物理习题集）就是一组Y，C-&gt;-&gt;B成立！ 例2：有这样一个关系 &lt;仓库管理员，仓库号，库存产品号&gt; ，假设一个产品只能放到一个仓库中，但是一个仓库可以有若干管理员。 我们取一个（仓库管理员，仓库号），与之有一组库存产品号与之对应，而与仓库管理员无关，所以仓库号-&gt;-&gt;库存产品号,而这里面也存在仓库号-&gt;-&gt;仓库管理员,而与库存产品号无关。 推论 1.如果将对应一组Y值改为一个Y值，多值依赖就变成函数依赖了，所以可以说函数依赖是特殊的多值依赖。 2.若X-&gt;-&gt;Y，且Z为空集，则称X-&gt;-&gt;Y为平凡的多值依赖,否则称为非平凡的多值依赖。 存在的问题 1.冗余大 2.插入复杂 3.更新复杂 4.删除复杂 性质 1.对称性若X-&gt;-&gt;Y,则X-&gt;-&gt;Z，其中Z=U-X-Y 2.传递性若X-&gt;-&gt;Y, Y-&gt;-&gt;Z,则X-&gt;-&gt;Z 对称性: 参考文献:1.《数据库系统概念》， 杨冬青、李红燕、唐世渭，北京：机械工业出版社，20122.《数据库系统概论》，王珊、萨师煊，北京：高等教育出版社，2014","categories":[{"name":"技术","slug":"技术","permalink":"http://wxy-cs.com/categories/技术/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://wxy-cs.com/tags/数据库/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://wxy-cs.com/categories/技术/"}]}]}